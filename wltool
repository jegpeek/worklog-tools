#! /usr/bin/env python
# -*- mode: python ; coding: utf-8 -*-
# Copyright 2014 Peter Williams <peter@newton.cx>
# Licensed under the GNU General Public License, version 3 or higher.

"""usage: wltool <command> [arguments...]

workog commands are:

  extract     Print out worklog records of a specific type
  html        Fill in an HTML-formatted template
  latex       Fill in a LaTeX-formatted template
  summarize   Summarize the records present in the worklog data files

Running 'wltool <command> --help' may give more information on the command
in question."""

from worklog import *


def _cli_render (argv):
    fmtname = argv[0]

    if len (argv) not in (2, 3):
        die ('usage: wltool %s <template> [datadir]', fmtname)

    tmpl = argv[1]

    if len (argv) < 3:
        datadir = '.'
    else:
        datadir = argv[2]

    if fmtname == 'latex':
        render = render_latex
    elif fmtname == 'html':
        render = render_html
    else:
        die ('unknown output format "%s"', fmtname)

    context, commands = setup_processing (render, datadir)

    with open (tmpl) as f:
        for outline in process_template (f, commands, context):
            print outline.encode ('utf8')


cli_latex = _cli_render
cli_html = _cli_render


def cli_extract (argv):
    from inifile import write
    import sys

    if len (argv) not in (2, 3):
        die ('usage: wltool extract <section-name> [datadir]')

    sectname = argv[1]

    if len (argv) < 3:
        datadir = '.'
    else:
        datadir = argv[2]

    write (sys.stdout, (i for i in load (datadir) if i.section == sectname))


def cli_summarize (argv):
    if len (argv) not in (1, 2):
        die ('usage: wltool summarize [datadir]')

    if len (argv) < 2:
        datadir = '.'
    else:
        datadir = argv[1]

    counts = {}
    maxsectlen = 0

    for i in load (datadir):
        counts[i.section] = counts.get (i.section, 0) + 1
        maxsectlen = max (maxsectlen, len (i.section))

    for section, count in sorted (counts.iteritems ()):
        print '% *s: %d' % (maxsectlen, section, count)


if __name__ == '__main__':
    import sys

    if len (sys.argv) < 2 or '--help' in sys.argv:
        print __doc__
        raise SystemExit (0)

    cmdname = sys.argv[1]
    clicmd = globals ().get ('cli_' + cmdname)

    if not callable (clicmd):
        die ('unknown subcommand "%s"', cmdname)

    clicmd (sys.argv[1:])
